<?xml version="1.0" encoding="us-ascii"?>
<!-- A wrapper state that contains all other states in this file
- it represents the complete state machine -->
<scxml xmlns="http://www.w3.org/2005/07/scxml"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.w3.org/2005/07/scxml ../scxml.xsd"
       version="1.0"
       initial="Main"
       datamodel="ecmascript">
    <state id="Main">
        <!-- its initial state is Test1 -->
        <initial>
            <transition target="Test1"/>
        </initial>

        <!-- Really simple state showing the basic syntax. -->
        <state id="Test1">
            <initial>
                <transition target="Test1Sub1"/>
            </initial>
            <!-- Runs before we go into the substate -->
            <onentry>
                <log expr="'Inside Test1'"/>
            </onentry>

            <datamodel>
                <data id="Bernd">
                    <bu>
                        Some Content
                    </bu>
                </data>
            </datamodel>

            <!-- Here is our first substate -->
            <state id="Test1Sub1">
                <onentry>
                    <log expr="'Inside Test1Sub1.'"/>
                </onentry>
                <onexit>
                    <log expr="'Leaving Test1Sub1'"/>
                </onexit>
                <!-- Go to Sub2 on Event1 -->
                <transition event="Event1" target="Test1Sub2"/>
            </state>

            <!-- Here is the second substate
                 It is final, so Test1 is done when we get here -->
            <final id="Test1Sub2"/>

            <!-- We get this event when we reach Test1Sub2. -->
            <transition event="done.state.Test1" target="Test2"/>

            <!-- We run this on the way out of Test1 -->
            <onexit>
                <log expr="'Leaving Test1...'"/>
            </onexit>
        </state>

        <state id="Test2" xmlns:xi="http://www.w3.org/2001/XInclude">
            <initial>
                <transition target="Test2Sub1"/>
            </initial>
            <!-- This time we reference a state
                 defined in an external file.   -->
            <xi:include href="Test2Sub1.xml" parse="text"/>
            <final id="Test2Sub2"/>
            <!-- Test2Sub2 is defined as final, so this
                 event is generated when we reach it -->
            <transition event="done.state.Test2" target="Test3"/>
        </state>

        <state id="Test3">
            <initial>
                <transition target="Test3Sub1">
                </transition>
            </initial>

            <state id="Test3Sub1">
                <onentry>
                    <log expr="'Inside Test3Sub1...'"/>
                    <!-- Send our self an event in 5s -->
                    <send event="Timer" delay="5s"/>
                </onentry>
                <!-- Transition on to Test4.
                     This will exit both us and our parent. -->
                <transition event="Timer" target="Test4"/>
                <onexit>
                    <log expr="'Leaving Test3Sub1...'"/>
                </onexit>
            </state>

            <onexit>
                <log expr="'Leaving Test3...'"/>
            </onexit>
        </state>

        <state id="Test4">
            <onentry>
                <log expr="'Inside Test4...'"/>
            </onentry>
            <initial>
                <transition target="Test4Sub1"/>
            </initial>

            <state id="Test4Sub1">
                <onexit>
                    <log expr="'Leaving Test4Sub1...'"/>
                </onexit>
                <!-- This transition causes the state to exit immediately
                     after entering Test4Sub1.  The transition has no event
                     or guard so it is always active -->
                <transition target="Test5"/>
            </state>
        </state>

        <state id="Test5">
            <onentry>
                <log expr="'Inside Test5...'"/>
            </onentry>
            <initial>
                <transition target="Test5P"/>
            </initial>

            <!-- Fire off parallel states.  In a more realistic example
            the parallel substates Test5PSub1 and Test5PSub2 would themselves
            have substates and would do some real work before transitioning to final substates -->
            <parallel id="Test5P">
                <state id="Test5PSub1" initial="Test5PSub1Final">
                    <final id="Test5PSub1Final"/>
                </state>
                <state id="Test5PSub2" initial="Test5PSub2Final">
                    <final id="Test5PSub2Final"/>
                </state>
                <onexit>
                    <log expr="'all parallel states done'"/>
                </onexit>
            </parallel>

            <!-- The parallel states immediately transition to final substates,
            so this event is generated immediately.   -->
            <transition event="done.state.Test5P" target="Test6"/>
        </state>

        <!--
             - This state shows invocation of an external component.
             - We will use CCXML + VoiceXML actions as an example
             - as it is a good smoke test to show how it all
             - fits together.
             - Note: In a real app you would likely
             - split this over several states but we
             - are trying to keep it simple here.
        -->
        <state id="Test6">
            <!-- removed for now -->
        </state>

        <!-- This final state is an immediate child of Main
             -  when we get here, Main.done is generated. -->
        <final id="Done"/>
        <!-- End of Main > -->
    </state>
</scxml>